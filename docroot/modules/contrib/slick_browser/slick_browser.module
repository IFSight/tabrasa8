<?php

/**
 * @file
 * Provides a Slick Entity Browser integration.
 */

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\blazy\Blazy;
use Drupal\slick_browser\SlickBrowserDefault;

/**
 * Provides a convenient shortcut for procedural hooks.
 *
 * @param string $key
 *   Identifier of the service.
 *
 * @return class
 *   The required Slick Browser class instance.
 */
function slick_browser($key = 'manager') {
  static $manager;
  static $widget;

  if (!isset($manager)) {
    $manager = \Drupal::service('slick_browser');
    $widget = \Drupal::service('slick_browser.widget');
  }

  switch ($key) {
    case 'widget':
      return $widget;

    default:
      return $manager;
  }
}

/**
 * Implements hook_theme().
 */
function slick_browser_theme() {
  $base = [
    'render element' => 'element',
    'file' => 'templates/slick_browser.theme.inc',
  ];

  $themes['slick_browser'] = $base;

  // Provides own markups, avoids conflict of interests against front-end slick.
  foreach (['slick', 'grid', 'vanilla'] as $item) {
    $key = $item == 'slick' ? $item : 'slick_' . $item;
    $themes[$key . '__browser'] = $base + ['base hook' => $key];
  }

  return $themes;
}

/**
 * Overrides hook_preprocess_views_view().
 */
function slick_browser_preprocess_views_view(&$variables) {
  slick_browser()->preprocessViewsView($variables);
}

/**
 * Checks if Slick Browser is applicable.
 */
function _slick_browser_applicable(array &$settings) {
  $settings['_sb_widget'] = isset($settings['_context']) && $settings['_context'] == 'widget';
  $settings['_sb_views'] = isset($settings['view_plugin_id']) && $settings['view_plugin_id'] == 'slick_browser';
  return $settings['_sb_widget'] || $settings['_sb_views'];
}

/**
 * Overrides hook_preprocess_blazy().
 */
function slick_browser_preprocess_blazy(&$variables) {
  $settings = &$variables['settings'];
  if (_slick_browser_applicable($settings)) {
    slick_browser()->preprocessBlazy($variables);
  }
}

/**
 * Implements hook_blazy_alter().
 */
function slick_browser_blazy_alter(array &$build, array $settings) {
  if (_slick_browser_applicable($settings)) {
    $build['#build']['settings']['noscript'] = FALSE;
    $build['#build']['settings']['fx'] = '';
  }
}

/**
 * Implements hook_form_alter().
 */
function slick_browser_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (isset($form['#browser_parts']) && strpos($form_id, 'slick_browser') !== FALSE) {
    slick_browser('widget')->formAlter($form, $form_state, $form_id);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function slick_browser_form_views_ui_add_handler_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  slick_browser('widget')->formViewsUiAddHandlerFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function slick_browser_field_widget_entity_browser_entity_reference_form_alter(&$element, FormStateInterface $form_state, $context) {
  slick_browser('widget')->fieldWidgetFormAlter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function slick_browser_field_widget_entity_browser_file_form_alter(&$element, FormStateInterface $form_state, $context) {
  slick_browser('widget')->fieldWidgetFormAlter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function slick_browser_field_widget_media_library_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  slick_browser('widget')->fieldWidgetFormAlter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function slick_browser_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  if (in_array($plugin->getPluginId(), SlickBrowserDefault::thirdPartyWidgets())) {
    return slick_browser('widget')->widgetThirdPartySettingsForm($plugin, $field_definition, $form_mode, $form, $form_state);
  }
  return [];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function slick_browser_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  $settings = isset($variables['element']['#settings']) ? $variables['element']['#settings'] : [];
  if (!empty($settings['_browser'])) {
    slick_browser('widget')->themeSuggestionsAlter($suggestions, $variables, $hook);
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function slick_browser_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  slick_browser('widget')->formViewsExposedFormAlter($form, $form_state);
}

/**
 * Implements hook_config_schema_info_alter().
 *
 * @todo use BlazyAlter post blazy:2.x.
 */
function slick_browser_config_schema_info_alter(array &$definitions) {
  Blazy::configSchemaInfoAlter($definitions, 'slick_browser', SlickBrowserDefault::widgetSettings());
}

/**
 * Implements hook_help().
 */
function slick_browser_help($route_name) {
  if ($route_name == 'help.page.slick_browser') {
    $output = file_get_contents(dirname(__FILE__) . '/README.md');
    // @todo remove check once Blazy has stable release.
    return function_exists('blazy_parse_markdown') ? blazy_parse_markdown($output) : '<pre>' . $output . '</pre>';
  }
  return '';
}
