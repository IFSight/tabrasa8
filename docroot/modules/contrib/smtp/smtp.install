<?php

/**
 * @file
 * The installation instructions for the SMTP Authentication Support.
 */

use Drupal\Core\Url;
use Drupal\smtp\ConnectionTester\ConnectionTester;

/**
 * Implements hook_uninstall().
 */
function smtp_uninstall() {
  $config = \Drupal::service('config.factory');
  $smtp_config = $config->getEditable('smtp.settings');

  // Restore previous mail system.
  $default_system_mail = 'php_mail';
  $mail_config = $config->getEditable('system.mail');
  $default_interface = (!$smtp_config->get('prev_mail_system')) ? $smtp_config->get('prev_mail_system') : $default_system_mail;
  $mail_config->set('interface.default', $default_interface)
    ->save();

  // Cleaning garbage.
  $smtp_config->delete();
}

/**
 * Add SMTP timeout configuration and change default to 30.
 */
function smtp_update_8001() {
  \Drupal::configFactory()->getEditable('smtp.settings')
    ->set('smtp_timeout', 30)
    ->save(TRUE);
}

/**
 * Add SMTP keepalive configuration and set default to FALSE.
 */
function smtp_update_8002() {
  \Drupal::configFactory()->getEditable('smtp.settings')
    ->set('smtp_keepalive', FALSE)
    ->save(TRUE);
}

/**
 * Implements hook_install().
 */
function smtp_install() {
  $messenger = \Drupal::messenger();
  // @var \Drupal\Core\Routing\RouteBuilderInterface $routeBuilder $route_builder.
  $route_builder = \Drupal::service('router.builder');

  // Makes the 'smtp.config' route available here, see hook_install doc.
  $route_builder->rebuild();

  $messenger->addMessage(t('Thanks for installing SMTP Authentication Support'));
  $messenger->addMessage(t('Server settings on <a href="@url_settings">SMTP Authentication Support</a>', [
    '@url_settings' => Url::fromRoute('smtp.config')->toString(),
  ]));
}

/**
 * Implements hook_requirements().
 */
function smtp_requirements(string $phase) {

  $requirements = [];
  if ($phase == 'runtime') {
    // Ensure PHPMailer exists.
    if (!class_exists(\PHPMailer\PHPMailer\PHPMailer::class)) {
      $config = \Drupal::service('config.factory');
      $smtp_config = $config->getEditable('smtp.settings');
      $smtp_config->set('smtp_on', FALSE)->save();
      $requirements['smtp_phpmailer']['title'] = t('SMTP: PHPMailer Library');
      $requirements['smtp_phpmailer']['severity'] = REQUIREMENT_ERROR;
      $requirements['smtp_phpmailer']['description'] = t('PHPMailer is Required for SMTP to function.');

      return $requirements;
    }
    else {
      $reflector = new \ReflectionClass('\PHPMailer\PHPMailer\PHPMailer');
      $dirname = file(dirname($reflector->getFileName()) . '/../VERSION');
      $phpMailerVersion = array_shift($dirname);
      $requirements['smtp_phpmailer']['title'] = t('SMTP: PHPMailer Library');
      $requirements['smtp_phpmailer']['severity'] = REQUIREMENT_INFO;
      $requirements['smtp_phpmailer']['description'] = t('PHPMailer %version is located at %path', ['%version' => $phpMailerVersion, '%path' => $reflector->getFileName()]);
    }

    $tester = new ConnectionTester();
    $requirements = array_merge($requirements, $tester->hookRequirements($phase));
  }
  return $requirements;
}
